/*************************************************************
Programmer: Nate Eastland
Class: Cpts 122, Spring 2015; Lab Section 6
Programming Assignment: 
Date: 3-26-2015
Description: This program is an attendance tracker for a class of students
				whose information is stored initially in a .csv file. The user can 
				search the list by several criteria, mark, and edit absences.
*************************************************************/

#ifndef ATT_TRACKER_H
#define ATT_TRACKER_H

#include <iostream>
#include <string>
#include <fstream>
#include <cstring>
#include <ctime>

using namespace std;

class node
{
	friend class List;

	public:
		node();
		node(int recordNum, string idNum, string studentName, string email, string units,
			string major, string studentLevel, string numAbsences, string absenceDate[], node* next);
		~node();

		//getters
		int getRecordNum() const;
		string getIdNum() const;
		string getName() const;
		string getEmail() const;
		string getUnits() const;
		string getMajor() const;
		string getLevel() const;
		string getNumAbsences() const;
		string getAbsenceDate(int index) const;

		//setters
		void setRecordNum(int newNum);
		void setIdNum(string newId);
		void setName(string newName);
		void setEmail(string newEmail);
		void setUnits(string newUnits);
		void setMajor(string newMajor);
		void setLevel(string newLevel);
		void setNumAbsences(string newAbsence);
		void setAbsenceDate(int index, string newDate);

	private:
		int recordNum;
		string idNum;
		string studentName;
		string email;
		string units;
		string major;
		string studentLevel;
		string numAbsences;
		string absenceDate[10];

		node* mpNext;
};

class List
{
	friend class menu;

	public:
		List();
		
		~List();

		node *makeNode(int record, string id, string name, string email, string units,
				string major, string level, string absences, string absenceDate[], node* next);

		void insert(int record, string id, string name, string email, string units,
				string major, string level, string absences, string absenceDate[], node* next);
		void import();
		void load();
		void store();
		void mark();
		void edit();
		void report(int option);

		node* getPointer();

	private:
		node* mpHead;
};

class menu
{
	public:
		menu();

		~menu();

		void displayMenu(List &duhList);
		
		void importList(List &duhList);
		void loadMaster(List &duhList);
		void storeMaster(List &duhList);
		void markAbsence(List &duhList);
		void editAbsences(List &duhList);
		void genReport(List &duhList);
		void exit();

		int getQuit() const;

		void setQuit(int set);

	private:
		int quit;
};

const std::string currentDateTime();

#endif
