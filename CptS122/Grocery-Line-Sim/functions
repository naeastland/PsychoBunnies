/*************************************************************
Programmer: Nate Eastland
Class: Cpts 122, Spring 2015; Lab Section 6
Programming Assignment: PA4 - Grocery Store Simulation
Date: 2-25-2015
Description: This program simulates a queue of customers for a 
			normal and express checkout lane. Customers are added to 
			the queue as time elapses and each customer's service time
			is determined by the number of items in their cart.
*************************************************************/

#include "functions.h"

/*******************************************************
  Function: makeNode()                   
  Date Created: 2-25-2015                                           
  Date Last Modified: 2-25-2015                                      
  Description: This function makes a new node to represent a customer who has
				entered the queue. The service time for these is determined by the 
				total number of items associated with each, the quantity and specific
				items are generated randomly.
  Input parameters: int customerNumber - the specific customer number of the total generated
					int normOrExp - integer corresponding to if the customer is in the express or normal line
					int totalTime -  the total time the customer will spend in line                               
  Returns:  QueueNode* pMem                                        
********************************************************/  

QueueNode* makeNode(int customerNumber, int normOrExp, int totalTime)
{
	QueueNode *pMem = NULL;
	Cart *shoppingCart = NULL;
	int totalInCart = 0;

	pMem = (QueueNode *)malloc(sizeof(QueueNode));

	if(pMem != NULL)
	{
		pMem->customerNumber = customerNumber;		
	
		if(normOrExp == 1)
		{
			totalInCart = rand() % 5 + 1;

			shoppingCart = generateCart(totalInCart);
		}
		else
		{
			totalInCart = rand() % 6 + 3;

			shoppingCart = generateCart(totalInCart);
		}

		pMem->serviceTime = totalInCart / 2;

		if(totalTime == 0)
		{
			pMem->totatlTime = pMem->serviceTime;
		}
		else
		{
			pMem->totatlTime = totalTime;
		}

		pMem->itemList = shoppingCart;
		pMem->pNext = NULL;
	}
	else
		printf("Memory allocation failed\n");

	return pMem;
}

/*******************************************************
  Function: generateCart()                   
  Date Created: 2-25-2015                                           
  Date Last Modified: 2-25-2015                                      
  Description: This function populates the linked list representing the items
				in a customer's cart.
  Input parameters: int totalItems - the total number of items to be created in the cart                                  
  Returns: Cart top - pointer to the beginning of the list of items in the cart                                         
********************************************************/  

Cart *generateCart(int totalItems)
{
	Cart *temp = NULL, *pMem = NULL, *top = NULL;

	int item = 0, i = 0;

	for(i = 0; i < totalItems; i++)
	{
		item = rand() % 6 + 1;

		pMem = itemGen(item);

		if(top == NULL)
		{
			top = pMem;
			temp = pMem;
		}
		else
		{
			temp->pNext = pMem;
			temp = pMem;
		}
	}

	return top;
}

/*******************************************************
  Function: itemGen()                    
  Date Created: 2-25-2015                                           
  Date Last Modified: 2-25-2015                                      
  Description: This funciton selects which of a set of items will be assigned to a single
				Cart node.
  Input parameters: int itemNumber - this number determines which item is selected                                  
  Returns: Cart* thing - node representing an item in the cart                                         
********************************************************/  

Cart *itemGen(int itemNumber)
{
	Cart *thing = NULL;

	thing = (Cart*)malloc(sizeof(Cart));
	
	if(itemNumber == 1)
	{
		thing->item = (char*)malloc(sizeof(char) * (strlen("Milk") +1));
		strcpy(thing->item, "Milk");
	}
	else if(itemNumber == 2)
	{
		thing->item = (char*)malloc(sizeof(char) * (strlen("Eggs") +1));
		strcpy(thing->item, "Eggs");
	}
	else if(itemNumber == 3)
	{
		thing->item = (char*)malloc(sizeof(char) * (strlen("Cereal") +1));
		strcpy(thing->item, "Cereal");
	}
	else if (itemNumber == 4)
	{
		thing->item = (char*)malloc(sizeof(char) * (strlen("Bread") +1));
		strcpy(thing->item, "Bread");
	}
	else if (itemNumber == 5)
	{
		thing->item = (char*)malloc(sizeof(char) * (strlen("Bananas") +1));
		strcpy(thing->item, "Bananas");
	}
	else
	{
		thing->item = (char*)malloc(sizeof(char) * (strlen("Salad") +1));
		strcpy(thing->item, "Salad");
	}

	thing->pNext = NULL;

	return thing;
}

/*******************************************************
  Function: printQueue()                   
  Date Created: 2-25-2015                                           
  Date Last Modified: 2-25-2015                                      
  Description: This funciton prints out the nodes within a queue, as well as the 
				list of grocery items associated with each node.
  Input parameters: Queue *pQ - a pointer to a struct containing the head and tail of the queue.                                   
  Returns: Nothing                                        
********************************************************/  

void printQueue(Queue *pQ)
{
	QueueNode *temp = NULL;
	Cart *stuff = NULL;

	temp = pQ->pHead;

	if(temp != NULL)
	{
		while(temp != NULL)
		{
			stuff = temp->itemList;

			putchar('\n');
			printf("Customer number -> %d\n", temp->customerNumber);
			
			printf("Stuff in cart: \n");

			while (stuff != NULL)
			{
				printf("%s\n", stuff->item);

				stuff = stuff->pNext;
			}
			
			temp = temp->pNext;	
		}
	}
}

/*******************************************************
  Function: enqueue()                   
  Date Created: 2-25-2015                                           
  Date Last Modified: 2-25-2015                                      
  Description: This function checks to see if the queue is currently empty, making a
				new node and assigning it to the head and tail of the queue. If the queue
				is not empty, this function determines the total service time to be passed to 
				the makeNode call by traversing the given queue, then creates the new node and 
				adds it to the tail of the queue.
  Input parameters: Queue *pQ - a pointer to a struct containing the head and tail of the queue
					int normOrExp - an integer indicating the normal or express lane
					int custNum - an integer indicating the specific customer number of the new node                                   
  Returns: Nothing                                        
********************************************************/ 

void enqueue(Queue *pQ,int normOrExp, int custNum)
{
	QueueNode *pMem = NULL, *temp = NULL;
	int totalTime = 0;

	if(pQ->pHead == NULL)//the queue is currently empty
	{
		pMem = makeNode(custNum, normOrExp, totalTime);
		
		pQ->pHead = pMem;
		pQ->pTail = pMem;
	}
	else
	{
		temp = pQ->pHead;

		while(temp != NULL)
		{
			totalTime += temp->serviceTime;
			
			temp = temp->pNext;
		}

		pMem = makeNode(custNum, normOrExp, totalTime);

		pQ->pTail->pNext = pMem;
		pQ->pTail = pMem;
	}
}

/*******************************************************
  Function: dequeue()                   
  Date Created: 2-25-2015                                           
  Date Last Modified: 2-25-2015                                      
  Description: This function frees the nodes populating the Cart list within a single
				QueueNode, updates the tail, then frees the node. 
  Input parameters: Queue *pQ - a pointer to a struct containing the head and tail of the queue                                   
  Returns: Nothing                                        
********************************************************/ 

void dequeue(Queue *pQ)
{
	QueueNode *temp = NULL;
	Cart *tempItem1 = NULL, *tempItem2 = NULL;

	temp = pQ->pHead;

	pQ->pHead = pQ->pHead->pNext;

	tempItem1 = temp->itemList;

	while(tempItem1->pNext != NULL)
	{
		tempItem2 = tempItem1;

		free(tempItem1->item);

		tempItem1 = tempItem1->pNext;

		free(tempItem2);
	}

	free(temp);
}


/*******************************************************
  Function: checkOut()                   
  Date Created: 2-25-2015                                           
  Date Last Modified: 2-25-2015                                      
  Description: This is the primary function that runs the simulation. It prints out an
				introduction message then asks the user for an integer value indicating how
				many minutes they would like to run the simulation. Various indicator variables
				run throughout the while loop, which continues to execute until a control
				variable reaches the value input by the user.
  Input parameters: None                                   
  Returns: Nothing                                         
********************************************************/  

void checkOut()
{
	Queue express = {NULL, NULL}, normal = {NULL, NULL};
	int runTime = 0, endTime = 0;
	int randExpress = 0, randNormal = 0, arrivalExp = 0, arrivalNorm = 0;
	int sCountExpress = 0, sCountNorm = 0, custNum = 1;
	
	printf("********** Welcome to C's Grocery Simulator **********\n");
	printf("This program simulates customers checking out from a store\n");
	printf("For every customer that finishes checking out, the program\n");
	printf("will print out their customer number, total time to check out,\n");
	printf("and which line they are leaving from.\n");
	printf("For every 10 minutes elapsed, the system will print out the\n");
	printf("current queue for the normal and express lanes.\n");
	printf("The simulation will run for a number of minutes input by you.\n");

	printf("\nPlease enter an integer duration for the simulator to run in minutes\n");

	scanf("%d", &endTime);

	randExpress = rand() % 5 + 1;
	randNormal = rand() % 6 + 3;

	while(runTime <= endTime)
	{
		if((runTime >= randNormal) && (normal.pHead != NULL))
		{
			sCountNorm++;
		}

		if((runTime >= randExpress) && (express.pHead != NULL))
		{
			sCountExpress++;
		}

		if((runTime % 10 == 0) && (runTime != 0))
		{
			printf("\n******************************************************\n");
			printf("Ten Minutes have elapsed.\n");
			printf("\nThe current queue for the normal lane:\n");
			printQueue(&normal);
			putchar('\n');

			printf("The current queue for the express lane:\n");
			printQueue(&express);
			printf("\n******************************************************\n");
		}

		if((runTime % 1440 == 0) && (runTime != 0))
		{
			custNum = 1;
		}

		if((normal.pHead != NULL) && (sCountNorm == normal.pHead->serviceTime))
		{
			putchar('\n');
			printf("--> Customer %d has finished checking out from the normal line.\n",  normal.pHead->customerNumber);
			printf("--> With a total time in queue of %d.\n", normal.pHead->totatlTime);

			dequeue(&normal);

			sCountNorm = 0;
			putchar('\n');
		}

		if((express.pHead != NULL) && (sCountExpress == express.pHead->serviceTime))
		{
			putchar('\n');
			printf("--> Customer %d has finished checking out from the express line.\n",  express.pHead->customerNumber);
			printf("--> With a total time in queue of %d minutes.\n", express.pHead->totatlTime);

			dequeue(&express);

			sCountExpress = 0;
			putchar('\n');
		}

		if(arrivalExp == randExpress)
		{
			enqueue(&express, 0, custNum);
			custNum++;
			randExpress = rand() % 5 + 1;
			arrivalExp = 0;
		}

		if(arrivalNorm == randNormal)
		{
			enqueue(&normal, 1, custNum);
			custNum++;
			randNormal = rand() % 5 + 1;
			arrivalNorm = 0;
		}

		arrivalExp++;
		arrivalNorm++;
		runTime++;
	}
}
