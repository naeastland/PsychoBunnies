#include "battleship.h"


void initialize_game_board(char board[][MAX_COLS], int rows, int cols)
{
	int row_index = 0, col_index = 0;

	for (row_index = 0; row_index < rows; row_index++)
	{
		for (col_index = 0; col_index < cols; col_index++)
		{
			board[row_index][col_index] = '~';
		}
	}
}

void display_board(char board[][MAX_COLS], int rows, int cols)
{
	int row_index = 0, col_index = 0;

	printf("  0 1 2 3 4 5 6 7 8 9\n");

	for (row_index = 0; row_index < rows; row_index++)
	{
		printf ("%d ", row_index);

		for (col_index = 0; col_index < cols; col_index++)
		{
			printf("%C ", board[row_index][col_index]);
		}

		putchar ('\n');
	}
}


void my_strcpy (char *dest, char *src)
{
	int index = 0;

	while (src[index] != '\0') 
	{
		dest[index++] = src[index];
	}

	dest[index] = '\0';
}


void generate_start_pt (int direction, int length, int *row_ptr, int *col_ptr)
{
	if (direction == 0) //horizontal - left to right
	{
		*row_ptr = rand () % MAX_ROWS;
		*col_ptr = rand () % (MAX_COLS - length - 1);
	}
	else //vertical - top down 
	{
		*row_ptr = rand () % (MAX_ROWS - length - 1);
		*col_ptr = rand () % (MAX_COLS);
	}
	
}

int generate_dir (void)
{
	int direction = 0; 

	direction = rand () % 2; //0 -  horizontal, 1 - vertical

	return direction;
}

void my_strcat (char *dest, char *src)
{
	int index = 0, src_index = 0;

	//positioning to proper position in destination array
	for (index = 0; dest[index] != '\0'; index++);

	//are we in correct position to overwrite null character?
	for (src_index = 0; src[src_index] != '\0'; src_index++, index++)
	{
		dest[index] = src[src_index];
	}

	dest[index] = '\0';
}

void place_ship (char board[][MAX_COLS], int length, char symbol)
{
	int direction = 0, row_start = 0, col_start = 0, counter = 0;

	direction = generate_dir ();
	generate_start_pt (direction , 5, &row_start, &col_start);

	if (direction == 0 ) //horizontal direction
	{
		while (counter < length)
		{
			board[row_start][col_start + counter] = symbol;
			counter++;
		}
	}
	else //vertical position
	{
		while (counter < length)
		{
			board[row_start + counter][col_start] = symbol;
			counter++;
		}
	}
}
